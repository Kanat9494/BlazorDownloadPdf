@page "/"
@inject BlazorDownloadPdf.Repository.IInvoiceService invoiceService
@inject IJSRuntime jsRunTime

<div style="float:left; margin-right: 5px;">
    <label>Invoice Number</label>
    <input type="number" @bind="@invoice.Number"/>
    <label>Date</label>
    <input type="date" @bind="invoice.Date"/>
    <label>Value</label>
    <input type="number" @bind="invoice.Value"/>
</div>

<button class="btn btn-success" style="float: left; margin-right: 5px;" @onclick="SaveInvoice">Save</button>
<button class="btn btn-primary" style="float: left;" @onclick="AddNew">Add New</button>

<br />
<br />

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Invoice No.</th>
            <th>Date</th>
            <th>Value</th>
            <th>Upload Pdf</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in invoices)
        {
            <tr>
                <td>@item.Number</td>
                <td>@item.Date.ToString("dd-MMM-yyyy")</td>
                <td>@item.Value</td>
                <td>
                    <InputFile OnChange="@(e => HandleFileSelected(e, @item.InvoiceId))" />
                </td>
                <td>
                    @if (item.Attachment != null)
                    {
                        <button class="btn btn-primary" @onclick="@(e => DownLoadPdf(@item.InvoiceId))">Download Pdf</button>
                        <button class="btn btn-danger" @onclick="@(e => DeletePdf(item.InvoiceId))">Delete Pdf</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code 
{
    Invoice invoice = new Invoice();
    List<Invoice> invoices = new List<Invoice>();
    IFileListEntry file; 

    protected override async Task OnInitializedAsync()
    {

    }

    private void GetAllInvoices()
    {
        invoices = invoiceService.GetInvoices();
    }

    private void AddNew()
    {
        invoice = new Invoice();
    }

    private void SaveInvoice()
    {
        invoiceService.Save(invoice);
        invoice = new Invoice();
        GetAllInvoices();
    }

    async void HandleFileSelected(InputFileChangeEventArgs files, int invoiceId)
    {
        var attch = await FileSender(files);
        invoiceService.UploadPdf(invoiceId, attch);
    }

    public async Task<byte[]> FileSender(InputFileChangeEventArgs file)
    {
        using (var ms = new System.IO.MemoryStream())
        {
            //await file.Data.CopyToAsync(ms);
            IBrowserFile pdffile = file.File;
            var buffer = new byte[pdffile.Size];
            await pdffile.OpenReadStream().ReadAsync(buffer);
            string pdfType = pdffile.ContentType;
            string pdfUrl = $"data:{pdfType};base64,{Convert.ToBase64String(buffer)}";
            return Encoding.GetEncoding("UTF-8").GetBytes(pdfUrl);
        }
    }

    private void DeletePdf(int invoiceId)
    {
        invoiceService.DeletePdf(invoiceId);
        GetAllInvoices();
    }

    private void DownLoadPdf(int invoiceId)
    {
        var invoice = invoices.FirstOrDefault(x => x.InvoiceId == invoiceId);
        jsRunTime.InvokeVoidAsync("saveAsFile", "PdfFileName1", invoice.Attachment);
        GetAllInvoices();
    }
}